generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          Int       @id @default(autoincrement())
  name        String
  main_image  String
  images      String[]
  description String
  openTime    String
  closeTime   String
  slug        String    @unique
  price       Price
  location_id Int
  cuisine_id  Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  bookings    Booking[]
  items       Item[]
  cuisine     Cuisine   @relation(fields: [cuisine_id], references: [id])
  location    Location  @relation(fields: [location_id], references: [id])
  reviews     Review[]
  tables      Table[]
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  restaurants Restaurant[]
}

model Item {
  id            Int        @id @default(autoincrement())
  name          String
  price         String
  description   String
  restaurant_id Int
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
}

model Cuisine {
  id          Int          @id @default(autoincrement())
  name        String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  restaurants Restaurant[]
}

model Review {
  id            Int        @id @default(autoincrement())
  first_name    String
  last_name     String
  text          String
  rating        Float
  restaurant_id Int
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  user_id       Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  user          User       @relation(fields: [user_id], references: [id])
}

model User {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  city       String
  email      String   @unique
  phone      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  password   String
  reviews    Review[]
}

model Booking {
  id                Int                @id @default(autoincrement())
  number_of_people  Int
  booking_time      DateTime
  booker_email      String
  booker_phone      String
  booker_first_name String
  booker_last_name  String
  booker_occasion   String?
  booker_request    String?
  restaurant_id     Int
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  restaurant        Restaurant         @relation(fields: [restaurant_id], references: [id])
  tables            BookingsOnTables[]
}

model Table {
  id               Int                @id @default(autoincrement())
  seats            Int
  restaurant_id    Int
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  bookings         BookingsOnTables[]
  restaurant       Restaurant         @relation(fields: [restaurant_id], references: [id])
}

model BookingsOnTables {
  booking_id Int
  table_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Booking    Booking  @relation(fields: [booking_id], references: [id])
  Table      Table    @relation(fields: [table_id], references: [id])

  @@id([booking_id, table_id])
}

enum Price {
  CHEAP
  REGULAR
  EXPENSIVE
}
